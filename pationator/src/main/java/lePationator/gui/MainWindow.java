/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lePationator.gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import lePationator.domain.ChampSaisie;
import lePationator.domain.Controleur;
import lePationator.domain.Patio;
import lePationator.domain.PieceBois;
import lePationator.domain.Section;
import lePationator.domain.Vue;

/**
 *
 * @author Hassen
 */
public class MainWindow extends javax.swing.JFrame {

    public Controleur getControleur() {
        return controleur;
    }

    private Controleur controleur;
    private boolean flagJComboBox;
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        controleur = new Controleur();
        
        initComponents();

        frameVisible(false);
    }

    private void frameVisible(boolean visible){
        jPanelPrincipal.setVisible(visible);
        jMenuEnregistrerSous.setEnabled(visible);
        jMenuExporter.setEnabled(visible);
        jMenuItemMagique.setEnabled(visible);
        jMenuItemListePiece.setEnabled(visible);
        jMenuItem1.setEnabled(visible);
        jMenuUndo.setEnabled(visible);
        jMenuRedo.setEnabled(visible);
        jMenuExporterPNG.setEnabled(visible);
    }
    private void sauvegarderEtatPatio(){
        controleur.sauvegarderPatioListeUndoRedo();
        if(premierProjet){
            jMenuUndo.setEnabled(false);
            jMenuRedo.setEnabled(false);
            premierProjet = false;
        }else{
            jMenuUndo.setEnabled(true);
            jMenuRedo.setEnabled(false);
        }
    }
    private void chargerInfoPatio(){
        String[] str = controleur.chargerInfoPatio();
        textPatioLargeur.setText(str[0]);
        textPatioLongueur.setText(str[1]);
        textPatioHauteur.setText(str[2]);
        textPlancheEspace.setText(str[3]);
        textEspacePoutre.setText(str[4]);
        textSoliveEspace.setText(str[5]);
        textSolivePAFaux.setText(str[12]);
        flagJComboBox = true;
            
        if("1.25".equals(str[6])){
            jComboBoxPlanche.setSelectedIndex(1);
        }else{
            jComboBoxPlanche.setSelectedIndex(0);
        }
            
        switch (str[8]) {
            case "3.5":
                jComboBoxSolive.setSelectedIndex(0);
                break;
            case "5.5":
                jComboBoxSolive.setSelectedIndex(1);
                break;
            case "7.25":
                jComboBoxSolive.setSelectedIndex(2);
                break;
            case "9.25":
                jComboBoxSolive.setSelectedIndex(3);
                break;
            case "11.25":
                jComboBoxSolive.setSelectedIndex(4);
                break;
            default:
                break;
        }
        switch (str[9]) {
            case "3.5":
                jComboBoxPoutre.setSelectedIndex(0);
                break;
            case "5.5":
                jComboBoxPoutre.setSelectedIndex(1);
                break;
            case "7.25":
                jComboBoxPoutre.setSelectedIndex(2);
                break;
            case "9.25":
                jComboBoxPoutre.setSelectedIndex(3);
                break;
            case "11.25":
                jComboBoxPoutre.setSelectedIndex(4);
                break;
            default:
                break;
        }
        flagJComboBox = false;
        textPoutreNombre.setText(str[10]);
        textPoteauNombre.setText(str[11]);
        textPoutreNbPlieSimple.setText(str[13]);
        textPoutreNbPlieDouble.setText(str[14]);
        jTextPrixTotal.setText(controleur.getPrixTotal());
        for (Component component : leftPanelBouton.getComponents()) {
            if(component instanceof javax.swing.JTextField){
                javax.swing.JTextField text = (javax.swing.JTextField) component;
                text.setBackground(Color.white);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioBoutonGroupe = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        jPanelPrincipal = new javax.swing.JPanel();
        leftPanelBouton = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jComboBoxPlanche = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jComboBoxSolive = new javax.swing.JComboBox<>();
        jLabel31 = new javax.swing.JLabel();
        jComboBoxPoutre = new javax.swing.JComboBox<>();
        jLabel33 = new javax.swing.JLabel();
        textPatioLargeur = new javax.swing.JTextField();
        textPatioLongueur = new javax.swing.JTextField();
        textPatioHauteur = new javax.swing.JTextField();
        textPlancheEspace = new javax.swing.JTextField();
        textEspacePoutre = new javax.swing.JTextField();
        textSoliveEspace = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        textPoutreNombre = new javax.swing.JTextField();
        textPoteauNombre = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        textSolivePAFaux = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        textPoutreNbPlieSimple = new javax.swing.JTextField();
        textPoutreNbPlieDouble = new javax.swing.JTextField();
        topPanelBouton = new javax.swing.JPanel();
        radioPlan = new javax.swing.JRadioButton();
        radioCotee = new javax.swing.JRadioButton();
        radioFace = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBoxSolive = new javax.swing.JCheckBox();
        jCheckBoxPlanche = new javax.swing.JCheckBox();
        jCheckBoxPoutre = new javax.swing.JCheckBox();
        jCheckBoxPoteau = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        textPanelInfoPiece = new javax.swing.JTextPane();
        jLabel5 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        panelPlancheColor = new javax.swing.JPanel();
        panelSoliveColor = new javax.swing.JPanel();
        panelPoutreColor = new javax.swing.JPanel();
        panelPoteauColor = new javax.swing.JPanel();
        jSeparator8 = new javax.swing.JSeparator();
        jLabel28 = new javax.swing.JLabel();
        jCheckPlancheTrans = new javax.swing.JCheckBox();
        jCheckSoliveTrans = new javax.swing.JCheckBox();
        jCheckPoutreTrans = new javax.swing.JCheckBox();
        jCheckPoteauTrans = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPrixTotal = new javax.swing.JTextPane();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextInfoValidation = new javax.swing.JTextPane();
        patioPanel = new lePationator.gui.PatioPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuCreeProjet = new javax.swing.JMenuItem();
        jMenuOuvrirProjet = new javax.swing.JMenuItem();
        jMenuEnregistrerSous = new javax.swing.JMenuItem();
        jMenuExporterPNG = new javax.swing.JMenuItem();
        jMenuExporter = new javax.swing.JMenuItem();
        jMenuQuitter = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemMagique = new javax.swing.JMenuItem();
        jMenuItemListePiece = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuUndo = new javax.swing.JMenuItem();
        jMenuRedo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Le Pationator");
        setBackground(new java.awt.Color(241, 213, 91));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        mainPanel.setLayout(new java.awt.BorderLayout());

        jPanelPrincipal.setBackground(new java.awt.Color(241, 213, 91));

        leftPanelBouton.setBackground(new java.awt.Color(225, 209, 142));
        leftPanelBouton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        leftPanelBouton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        leftPanelBouton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                leftPanelBoutonKeyPressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tempus Sans ITC", 3, 12)); // NOI18N
        jLabel4.setText("Largeur Patio: (pied-pouce-fraction)");

        jLabel7.setFont(new java.awt.Font("Tempus Sans ITC", 3, 12)); // NOI18N
        jLabel7.setText("Longueur Patio: (pied-pouce-fraction)");

        jLabel9.setFont(new java.awt.Font("Tempus Sans ITC", 3, 12)); // NOI18N
        jLabel9.setText("Hauteur Patio: (pied-pouce-fraction)");

        jLabel13.setFont(new java.awt.Font("Tempus Sans ITC", 3, 12)); // NOI18N
        jLabel13.setText("Dimension planche:");

        jComboBoxPlanche.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jComboBoxPlanche.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2 x 6", "5/4 x 6" }));
        jComboBoxPlanche.setNextFocusableComponent(leftPanelBouton);
        jComboBoxPlanche.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxPlancheItemStateChanged(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tempus Sans ITC", 3, 12)); // NOI18N
        jLabel15.setText("Espacement planche: (pied-pouce-fraction)");

        jLabel17.setFont(new java.awt.Font("Tempus Sans ITC", 3, 12)); // NOI18N
        jLabel17.setText("Espacement de poutre: (pied-pouce-fraction)");

        jLabel19.setFont(new java.awt.Font("Tempus Sans ITC", 3, 12)); // NOI18N
        jLabel19.setText("Espacement de solive: (pied-pouce-fraction)");

        jLabel21.setFont(new java.awt.Font("Tempus Sans ITC", 3, 12)); // NOI18N
        jLabel21.setText("Dimension solive:");

        jComboBoxSolive.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jComboBoxSolive.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2 x 4", "2 x 6", "2 x 8", "2 x 10", "2 x 12" }));
        jComboBoxSolive.setNextFocusableComponent(leftPanelBouton);
        jComboBoxSolive.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxSoliveItemStateChanged(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Tempus Sans ITC", 3, 12)); // NOI18N
        jLabel31.setText("Dimension poutre:");

        jComboBoxPoutre.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jComboBoxPoutre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2 x 4", "2 x 6", "2 x 8", "2 x 10", "2 x 12" }));
        jComboBoxPoutre.setNextFocusableComponent(leftPanelBouton);
        jComboBoxPoutre.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxPoutreItemStateChanged(evt);
            }
        });
        jComboBoxPoutre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPoutreActionPerformed(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Tempus Sans ITC", 3, 12)); // NOI18N
        jLabel33.setText("Nombre poteau par poutre:");

        textPatioLargeur.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        textPatioLargeur.setNextFocusableComponent(leftPanelBouton);
        textPatioLargeur.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textPatioLargeurFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textPatioLargeurFocusLost(evt);
            }
        });

        textPatioLongueur.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        textPatioLongueur.setNextFocusableComponent(leftPanelBouton);
        textPatioLongueur.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textPatioLongueurFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textPatioLongueurFocusLost(evt);
            }
        });

        textPatioHauteur.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        textPatioHauteur.setNextFocusableComponent(leftPanelBouton);
        textPatioHauteur.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textPatioHauteurFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textPatioHauteurFocusLost(evt);
            }
        });

        textPlancheEspace.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        textPlancheEspace.setNextFocusableComponent(leftPanelBouton);
        textPlancheEspace.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textPlancheEspaceFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textPlancheEspaceFocusLost(evt);
            }
        });

        textEspacePoutre.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        textEspacePoutre.setNextFocusableComponent(leftPanelBouton);
        textEspacePoutre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textEspacePoutreFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textEspacePoutreFocusLost(evt);
            }
        });

        textSoliveEspace.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        textSoliveEspace.setNextFocusableComponent(leftPanelBouton);
        textSoliveEspace.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textSoliveEspaceFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textSoliveEspaceFocusLost(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Tempus Sans ITC", 3, 12)); // NOI18N
        jLabel32.setText("Nombre poutre:");

        textPoutreNombre.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        textPoutreNombre.setNextFocusableComponent(leftPanelBouton);
        textPoutreNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textPoutreNombreFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textPoutreNombreFocusLost(evt);
            }
        });

        textPoteauNombre.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        textPoteauNombre.setNextFocusableComponent(leftPanelBouton);
        textPoteauNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textPoteauNombreFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textPoteauNombreFocusLost(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tempus Sans ITC", 3, 12)); // NOI18N
        jLabel20.setText("Porte à faux : (pied-pouce-fraction)");

        textSolivePAFaux.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        textSolivePAFaux.setNextFocusableComponent(leftPanelBouton);
        textSolivePAFaux.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textSolivePAFauxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textSolivePAFauxFocusLost(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Tempus Sans ITC", 3, 12)); // NOI18N
        jLabel34.setText("Nb  de plie poutree portée simple / double:");

        textPoutreNbPlieSimple.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        textPoutreNbPlieSimple.setNextFocusableComponent(leftPanelBouton);
        textPoutreNbPlieSimple.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textPoutreNbPlieSimpleFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textPoutreNbPlieSimpleFocusLost(evt);
            }
        });

        textPoutreNbPlieDouble.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        textPoutreNbPlieDouble.setNextFocusableComponent(leftPanelBouton);
        textPoutreNbPlieDouble.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textPoutreNbPlieDoubleFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textPoutreNbPlieDoubleFocusLost(evt);
            }
        });

        javax.swing.GroupLayout leftPanelBoutonLayout = new javax.swing.GroupLayout(leftPanelBouton);
        leftPanelBouton.setLayout(leftPanelBoutonLayout);
        leftPanelBoutonLayout.setHorizontalGroup(
            leftPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelBoutonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(leftPanelBoutonLayout.createSequentialGroup()
                        .addGroup(leftPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(leftPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(leftPanelBoutonLayout.createSequentialGroup()
                                    .addGroup(leftPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBoxPoutre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxPlanche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(textPatioLargeur, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(textPatioLongueur, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(textPatioHauteur, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(textPlancheEspace, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(textSoliveEspace, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(textEspacePoutre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textSolivePAFaux, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textPoutreNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSolive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(leftPanelBoutonLayout.createSequentialGroup()
                                .addComponent(textPoutreNbPlieSimple, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textPoutreNbPlieDouble, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(textPoteauNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(leftPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel34, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                                .addComponent(jLabel32, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 14, Short.MAX_VALUE)))
                .addContainerGap())
        );
        leftPanelBoutonLayout.setVerticalGroup(
            leftPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelBoutonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textPatioLargeur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textPatioLongueur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textPatioHauteur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textPlancheEspace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxPlanche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textSoliveEspace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textSolivePAFaux, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSolive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jComboBoxPoutre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textEspacePoutre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel32)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textPoutreNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel34)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textPoutreNbPlieSimple, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textPoutreNbPlieDouble, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textPoteauNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        topPanelBouton.setBackground(new java.awt.Color(241, 213, 91));
        topPanelBouton.setName(""); // NOI18N

        radioPlan.setBackground(new java.awt.Color(241, 213, 91));
        radioBoutonGroupe.add(radioPlan);
        radioPlan.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        radioPlan.setSelected(true);
        radioPlan.setText("Vue en plan");
        radioPlan.setFocusable(false);
        radioPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioPlanActionPerformed(evt);
            }
        });

        radioCotee.setBackground(new java.awt.Color(241, 213, 91));
        radioBoutonGroupe.add(radioCotee);
        radioCotee.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        radioCotee.setText("Vue de coté");
        radioCotee.setFocusable(false);
        radioCotee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioCoteeActionPerformed(evt);
            }
        });

        radioFace.setBackground(new java.awt.Color(241, 213, 91));
        radioBoutonGroupe.add(radioFace);
        radioFace.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        radioFace.setText("Vue de face");
        radioFace.setFocusable(false);
        radioFace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioFaceActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel1.setText("Vue :");

        jLabel2.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel2.setText("Partie à affichée:");

        jCheckBoxSolive.setBackground(new java.awt.Color(241, 213, 91));
        jCheckBoxSolive.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jCheckBoxSolive.setSelected(true);
        jCheckBoxSolive.setText("Solives");
        jCheckBoxSolive.setFocusable(false);
        jCheckBoxSolive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSoliveActionPerformed(evt);
            }
        });

        jCheckBoxPlanche.setBackground(new java.awt.Color(241, 213, 91));
        jCheckBoxPlanche.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jCheckBoxPlanche.setSelected(true);
        jCheckBoxPlanche.setText("Planches");
        jCheckBoxPlanche.setFocusable(false);
        jCheckBoxPlanche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPlancheActionPerformed(evt);
            }
        });

        jCheckBoxPoutre.setBackground(new java.awt.Color(241, 213, 91));
        jCheckBoxPoutre.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jCheckBoxPoutre.setSelected(true);
        jCheckBoxPoutre.setText("Poutres");
        jCheckBoxPoutre.setFocusable(false);
        jCheckBoxPoutre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPoutreActionPerformed(evt);
            }
        });

        jCheckBoxPoteau.setBackground(new java.awt.Color(241, 213, 91));
        jCheckBoxPoteau.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jCheckBoxPoteau.setSelected(true);
        jCheckBoxPoteau.setText("Poteaux");
        jCheckBoxPoteau.setFocusable(false);
        jCheckBoxPoteau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPoteauActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel3.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel3.setText("Couleur:            ");

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        textPanelInfoPiece.setEditable(false);
        textPanelInfoPiece.setBackground(new java.awt.Color(204, 189, 108));
        textPanelInfoPiece.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 102, 0), 2));
        textPanelInfoPiece.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        textPanelInfoPiece.setFocusable(false);
        jScrollPane1.setViewportView(textPanelInfoPiece);

        jLabel5.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel5.setText("Information pièce:");

        jLabel24.setBackground(new java.awt.Color(241, 213, 91));
        jLabel24.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel24.setText("Planches");

        jLabel25.setBackground(new java.awt.Color(241, 213, 91));
        jLabel25.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel25.setText("Solives");

        jLabel26.setBackground(new java.awt.Color(241, 213, 91));
        jLabel26.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel26.setText("Poutres");

        jLabel27.setBackground(new java.awt.Color(241, 213, 91));
        jLabel27.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel27.setText("Poteaux");

        panelPlancheColor.setBackground(new java.awt.Color(153, 102, 0));
        panelPlancheColor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        panelPlancheColor.setFocusable(false);
        panelPlancheColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelPlancheColorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelPlancheColorLayout = new javax.swing.GroupLayout(panelPlancheColor);
        panelPlancheColor.setLayout(panelPlancheColorLayout);
        panelPlancheColorLayout.setHorizontalGroup(
            panelPlancheColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 47, Short.MAX_VALUE)
        );
        panelPlancheColorLayout.setVerticalGroup(
            panelPlancheColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelSoliveColor.setBackground(new java.awt.Color(255, 153, 0));
        panelSoliveColor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        panelSoliveColor.setFocusable(false);
        panelSoliveColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelSoliveColorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelSoliveColorLayout = new javax.swing.GroupLayout(panelSoliveColor);
        panelSoliveColor.setLayout(panelSoliveColorLayout);
        panelSoliveColorLayout.setHorizontalGroup(
            panelSoliveColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 47, Short.MAX_VALUE)
        );
        panelSoliveColorLayout.setVerticalGroup(
            panelSoliveColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelPoutreColor.setBackground(new java.awt.Color(204, 204, 0));
        panelPoutreColor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        panelPoutreColor.setFocusable(false);
        panelPoutreColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelPoutreColorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelPoutreColorLayout = new javax.swing.GroupLayout(panelPoutreColor);
        panelPoutreColor.setLayout(panelPoutreColorLayout);
        panelPoutreColorLayout.setHorizontalGroup(
            panelPoutreColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 47, Short.MAX_VALUE)
        );
        panelPoutreColorLayout.setVerticalGroup(
            panelPoutreColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        panelPoteauColor.setBackground(new java.awt.Color(51, 51, 0));
        panelPoteauColor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        panelPoteauColor.setFocusable(false);
        panelPoteauColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelPoteauColorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelPoteauColorLayout = new javax.swing.GroupLayout(panelPoteauColor);
        panelPoteauColor.setLayout(panelPoteauColorLayout);
        panelPoteauColorLayout.setHorizontalGroup(
            panelPoteauColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 47, Short.MAX_VALUE)
        );
        panelPoteauColorLayout.setVerticalGroup(
            panelPoteauColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jSeparator8.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel28.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel28.setText("Transparence:");

        jCheckPlancheTrans.setBackground(new java.awt.Color(241, 213, 91));
        jCheckPlancheTrans.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jCheckPlancheTrans.setText("Planches");
        jCheckPlancheTrans.setFocusable(false);
        jCheckPlancheTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckPlancheTransActionPerformed(evt);
            }
        });

        jCheckSoliveTrans.setBackground(new java.awt.Color(241, 213, 91));
        jCheckSoliveTrans.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jCheckSoliveTrans.setText("Solives");
        jCheckSoliveTrans.setFocusable(false);
        jCheckSoliveTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckSoliveTransActionPerformed(evt);
            }
        });

        jCheckPoutreTrans.setBackground(new java.awt.Color(241, 213, 91));
        jCheckPoutreTrans.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jCheckPoutreTrans.setText("Poutres");
        jCheckPoutreTrans.setFocusable(false);
        jCheckPoutreTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckPoutreTransActionPerformed(evt);
            }
        });

        jCheckPoteauTrans.setBackground(new java.awt.Color(241, 213, 91));
        jCheckPoteauTrans.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jCheckPoteauTrans.setText("Poteaux");
        jCheckPoteauTrans.setFocusable(false);
        jCheckPoteauTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckPoteauTransActionPerformed(evt);
            }
        });

        jTextPrixTotal.setEditable(false);
        jTextPrixTotal.setBackground(new java.awt.Color(241, 213, 91));
        jTextPrixTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 102, 0)));
        jTextPrixTotal.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        jTextPrixTotal.setFocusable(false);
        jScrollPane3.setViewportView(jTextPrixTotal);

        jLabel6.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel6.setText("Prix total:");

        jButton1.setBackground(new java.awt.Color(96, 185, 77));
        jButton1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 10)); // NOI18N
        jButton1.setText("Initialiser zoom (Esc)");
        jButton1.setFocusable(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextInfoValidation.setEditable(false);
        jTextInfoValidation.setBackground(new java.awt.Color(241, 213, 91));
        jTextInfoValidation.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 102, 0)));
        jTextInfoValidation.setFont(new java.awt.Font("Tempus Sans ITC", 1, 21)); // NOI18N
        jTextInfoValidation.setForeground(new java.awt.Color(102, 0, 0));
        jTextInfoValidation.setAutoscrolls(false);
        jTextInfoValidation.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextInfoValidationKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTextInfoValidation);

        javax.swing.GroupLayout topPanelBoutonLayout = new javax.swing.GroupLayout(topPanelBouton);
        topPanelBouton.setLayout(topPanelBoutonLayout);
        topPanelBoutonLayout.setHorizontalGroup(
            topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelBoutonLayout.createSequentialGroup()
                .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelBoutonLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(topPanelBoutonLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(topPanelBoutonLayout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(topPanelBoutonLayout.createSequentialGroup()
                                .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radioFace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(radioCotee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(radioPlan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(12, 12, 12)))))
                .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelBoutonLayout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxPoutre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxPoteau, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxPlanche, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxSolive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(35, 35, 35))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelBoutonLayout.createSequentialGroup()
                        .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCheckPlancheTrans, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                            .addComponent(jCheckSoliveTrans, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckPoutreTrans, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckPoteauTrans, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelBoutonLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(73, 73, 73))
                    .addGroup(topPanelBoutonLayout.createSequentialGroup()
                        .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(topPanelBoutonLayout.createSequentialGroup()
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(panelPoteauColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(panelPoutreColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(topPanelBoutonLayout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(panelSoliveColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(panelPlancheColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)))
                .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(topPanelBoutonLayout.createSequentialGroup()
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelBoutonLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                            .addComponent(jScrollPane3)))
                    .addGroup(topPanelBoutonLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        topPanelBoutonLayout.setVerticalGroup(
            topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelBoutonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelBoutonLayout.createSequentialGroup()
                        .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckPlancheTrans, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelPlancheColor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxPlanche, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioPlan, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioCotee, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBoxSolive, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckSoliveTrans, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelSoliveColor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioFace, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBoxPoutre, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckPoutreTrans, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelPoutreColor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topPanelBoutonLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBoxPoteau))
                            .addGroup(topPanelBoutonLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckPoteauTrans, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(panelPoteauColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(22, 22, 22))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(topPanelBoutonLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2))))
            .addGroup(topPanelBoutonLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(topPanelBoutonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator8)))
        );

        patioPanel.setBackground(new java.awt.Color(96, 185, 77));
        patioPanel.setForeground(new java.awt.Color(255, 255, 255));
        patioPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                patioPanelMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                patioPanelMouseMoved(evt);
            }
        });
        patioPanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                patioPanelMouseWheelMoved(evt);
            }
        });
        patioPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                patioPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                patioPanelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout patioPanelLayout = new javax.swing.GroupLayout(patioPanel);
        patioPanel.setLayout(patioPanelLayout);
        patioPanelLayout.setHorizontalGroup(
            patioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1140, Short.MAX_VALUE)
        );
        patioPanelLayout.setVerticalGroup(
            patioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelPrincipalLayout = new javax.swing.GroupLayout(jPanelPrincipal);
        jPanelPrincipal.setLayout(jPanelPrincipalLayout);
        jPanelPrincipalLayout.setHorizontalGroup(
            jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(leftPanelBouton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(topPanelBouton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patioPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 10, Short.MAX_VALUE))
        );
        jPanelPrincipalLayout.setVerticalGroup(
            jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                        .addComponent(leftPanelBouton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                        .addComponent(topPanelBouton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(patioPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(11, 11, 11))
        );

        patioPanel.getAccessibleContext().setAccessibleDescription("");

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setFocusable(false);

        jMenu1.setBackground(new java.awt.Color(255, 255, 255));
        jMenu1.setText("File");
        jMenu1.setFocusable(false);
        jMenu1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenu1KeyPressed(evt);
            }
        });

        jMenuCreeProjet.setText("créer un projet");
        jMenuCreeProjet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCreeProjetActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuCreeProjet);

        jMenuOuvrirProjet.setText("ouvrir un projet");
        jMenuOuvrirProjet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOuvrirProjetActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuOuvrirProjet);

        jMenuEnregistrerSous.setText("Enregistrer sous (Ctrl+Shift+S)");
        jMenuEnregistrerSous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuEnregistrerSousActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuEnregistrerSous);

        jMenuExporterPNG.setText("Exporter en png");
        jMenuExporterPNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExporterPNGActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuExporterPNG);

        jMenuExporter.setText("Exporter en 3D");
        jMenuExporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExporterActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuExporter);

        jMenuQuitter.setText("Quitter");
        jMenuQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuQuitterActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuQuitter);

        jMenuBar1.add(jMenu1);

        jMenu2.setBackground(new java.awt.Color(255, 255, 255));
        jMenu2.setText("Edit");
        jMenu2.setFocusable(false);
        jMenu2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenu2KeyPressed(evt);
            }
        });

        jMenuItemMagique.setText("Bouton magique");
        jMenuItemMagique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMagiqueActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemMagique);

        jMenuItemListePiece.setText("Liste des pièces");
        jMenuItemListePiece.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemListePieceActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemListePiece);

        jMenuItem1.setText("Éditer le prix du bois");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuUndo.setText("Undo (Ctrl+Z)");
        jMenuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuUndoActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuUndo);

        jMenuRedo.setText("Redo (Ctrl+Q)");
        jMenuRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuRedoActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuRedo);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private boolean premierProjet = true;
    private void jMenuCreeProjetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCreeProjetActionPerformed

        controleur.creerProjet();
        frameVisible(true);
        this.setTitle("Nouveau projet");
        panelPlancheColor.setBackground(controleur.getPlancheColor());
        panelSoliveColor.setBackground(controleur.getSoliveColor());
        panelPoutreColor.setBackground(controleur.getPoutreColor());
        panelPoteauColor.setBackground(controleur.getPoteauColor());
        radioPlan.setSelected(true);
        jCheckBoxPlanche.setSelected(true);
        jCheckBoxSolive.setSelected(true);
        jCheckBoxPoutre.setSelected(true);
        jCheckBoxPoteau.setSelected(true);
        jCheckPlancheTrans.setSelected(false);
        jCheckSoliveTrans.setSelected(false);
        jCheckPoutreTrans.setSelected(false);
        jCheckPoteauTrans.setSelected(false);
        patioPanel.setMainWindow(this);
        chargerInfoPatio();
        afficherTextValidation();
        sauvegarderEtatPatio();
        controleur.initialiserZoom();
        patioPanel.repaint();
    }//GEN-LAST:event_jMenuCreeProjetActionPerformed
    private void jMenuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuUndoActionPerformed
        boolean undoActive = controleur.undo();
        if(!undoActive){
            jMenuUndo.setEnabled(false);
        }
        jMenuRedo.setEnabled(true);
        chargerLesOptionPatio();
        afficherTextValidation();
        patioPanel.repaint();
    }//GEN-LAST:event_jMenuUndoActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void patioPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patioPanelMouseMoved
        String infoPiece = controleur.infoPieceBois(evt.getPoint());
        if ( infoPiece != null){
            textPanelInfoPiece.setText(infoPiece);
        }
    }//GEN-LAST:event_patioPanelMouseMoved

    private void jMenuQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuQuitterActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Désirez-vous quitter l'application ?")
              == JOptionPane.YES_OPTION) System.exit(0); 
    }//GEN-LAST:event_jMenuQuitterActionPerformed

    private void jMenuItemListePieceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemListePieceActionPerformed
        PanelListePieceBois panel = new PanelListePieceBois();
        panel.getjTextListePieces().setText("\n"+controleur.getListePieceBois());
        JOptionPane.showOptionDialog(this, 
            new Object[] {panel},
            "Liste des pièces de bois",
            JOptionPane.NO_OPTION,
            JOptionPane.PLAIN_MESSAGE, null, 
            new String[] {"Ok"}, null); 
    }//GEN-LAST:event_jMenuItemListePieceActionPerformed
    private void afficherTextValidation(){
        if(controleur.validerPatio()){
            jTextInfoValidation.setText("");
        }else{
            jTextInfoValidation.setText("\nLe patio n'est pas valide !");
        }
    }
    private void textPatioLargeurFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPatioLargeurFocusLost
        String largeurPation = textPatioLargeur.getText();
        if(!textInitial.equals(largeurPation)){
            float val = controleur.getFloatValeur(largeurPation);
            if(val >= 0){
                controleur.changerValeurPatio(ChampSaisie.LARGEUR_PATIO, val);
                textPatioLargeur.setBackground(Color.WHITE);
                controleur.majPiecesDeBois();
                chargerInfoPatio();
                afficherTextValidation();
                sauvegarderEtatPatio();
                patioPanel.repaint();
            }else{
                textPatioLargeur.setBackground(new Color(205, 115, 33));
            }
        }

    }//GEN-LAST:event_textPatioLargeurFocusLost

    private void textPatioLargeurFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPatioLargeurFocusGained
        textInitial = textPatioLargeur.getText();
        textPatioLargeur.selectAll();
    }//GEN-LAST:event_textPatioLargeurFocusGained

    private void textPatioLongueurFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPatioLongueurFocusGained
        textInitial = textPatioLongueur.getText();
        textPatioLongueur.selectAll();
    }//GEN-LAST:event_textPatioLongueurFocusGained

    private void textPatioHauteurFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPatioHauteurFocusGained
        textInitial = textPatioHauteur.getText();
        textPatioHauteur.selectAll();
    }//GEN-LAST:event_textPatioHauteurFocusGained

    private void textPlancheEspaceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPlancheEspaceFocusGained
        textInitial = textPlancheEspace.getText();
        textPlancheEspace.selectAll();
    }//GEN-LAST:event_textPlancheEspaceFocusGained

    private void textEspacePoutreFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textEspacePoutreFocusGained
        textInitial = textEspacePoutre.getText();
        textEspacePoutre.selectAll();
    }//GEN-LAST:event_textEspacePoutreFocusGained

    private void textSoliveEspaceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textSoliveEspaceFocusGained
        textInitial = textSoliveEspace.getText();
        textSoliveEspace.selectAll();
    }//GEN-LAST:event_textSoliveEspaceFocusGained

    private void textPatioLongueurFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPatioLongueurFocusLost
        String largeurPation = textPatioLongueur.getText();
        if(!textInitial.equals(largeurPation)){
            float val = controleur.getFloatValeur(largeurPation);
            if(val >= 0){
                controleur.changerValeurPatio(ChampSaisie.LONGUEUR_PATIO, val);
                textPatioLongueur.setBackground(Color.WHITE);
                controleur.majPiecesDeBois();
                chargerInfoPatio();
                afficherTextValidation();
                sauvegarderEtatPatio();
                patioPanel.repaint();
            }else{
                textPatioLongueur.setBackground(new Color(205, 115, 33));
            }
        }
    }//GEN-LAST:event_textPatioLongueurFocusLost

    private void textPatioHauteurFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPatioHauteurFocusLost
        String largeurPatio = textPatioHauteur.getText();
        if(!textInitial.equals(largeurPatio)){
            float val = controleur.getFloatValeur(largeurPatio);
            if(val >= 0){
                controleur.changerValeurPatio(ChampSaisie.HAUTEUR_PATIO, val);
                textPatioHauteur.setBackground(Color.WHITE);
                controleur.majPiecesDeBois();
                chargerInfoPatio();
                afficherTextValidation();
                sauvegarderEtatPatio();
                patioPanel.repaint();
            }else{
                textPatioHauteur.setBackground(new Color(205, 115, 33));
            }
        }
    }//GEN-LAST:event_textPatioHauteurFocusLost

    private void textPlancheEspaceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPlancheEspaceFocusLost
        String largeurPation = textPlancheEspace.getText();
        if(!textInitial.equals(largeurPation)){
            float val = controleur.getFloatValeur(largeurPation);
            if(val >= 0){
                controleur.changerValeurPatio(ChampSaisie.ESPACE_PLANCHE, val);
                textPlancheEspace.setBackground(Color.WHITE);
                controleur.majPiecesDeBois();
                chargerInfoPatio();
                afficherTextValidation();
                sauvegarderEtatPatio();
                patioPanel.repaint();
            }else{
                textPlancheEspace.setBackground(new Color(205, 115, 33));
            }
        }
    }//GEN-LAST:event_textPlancheEspaceFocusLost

    private void textEspacePoutreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textEspacePoutreFocusLost
        String largeurPation = textEspacePoutre.getText();
        if(!textInitial.equals(largeurPation)){
            float val = controleur.getFloatValeur(largeurPation);
            if(val >= 0){
                controleur.changerValeurPatio(ChampSaisie.ESPACE_POUTRE, val);
                textEspacePoutre.setBackground(Color.WHITE);
                controleur.majPiecesDeBois();
                chargerInfoPatio();
                afficherTextValidation();
                sauvegarderEtatPatio();
                patioPanel.repaint();
            }else{
                textEspacePoutre.setBackground(new Color(205, 115, 33));
            }
        }
    }//GEN-LAST:event_textEspacePoutreFocusLost

    private void textSoliveEspaceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textSoliveEspaceFocusLost
        String largeurPatio = textSoliveEspace.getText();
        if(!textInitial.equals(largeurPatio)){
            float val = controleur.getFloatValeur(largeurPatio);
            if(val >= 0){
                controleur.changerValeurPatio(ChampSaisie.ESPACE_SOLIVE, val);
                textSoliveEspace.setBackground(Color.WHITE);
                controleur.majPiecesDeBois();
                chargerInfoPatio();
                afficherTextValidation();
                sauvegarderEtatPatio();
                patioPanel.repaint();
            }else{
                textSoliveEspace.setBackground(new Color(205, 115, 33));
            }
        }
    }//GEN-LAST:event_textSoliveEspaceFocusLost
    private void jComboBoxPlancheItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxPlancheItemStateChanged
        if(!flagJComboBox && evt.getStateChange()==ItemEvent.SELECTED){
            String item = jComboBoxPlanche.getSelectedItem().toString();
            if(item.equals("2 x 6")){
                controleur.changerValeurPatio(ChampSaisie.LARGEUR_PLANCHE, 5.5f);
                controleur.changerValeurPatio(ChampSaisie.DIMENSION_PLANCHE, 1.5f);
            }else{
                controleur.changerValeurPatio(ChampSaisie.LARGEUR_PLANCHE, 5.5f);
                controleur.changerValeurPatio(ChampSaisie.DIMENSION_PLANCHE, 1.25f);
            }
            controleur.majPiecesDeBois();
            chargerInfoPatio();
            afficherTextValidation();
            sauvegarderEtatPatio();
            patioPanel.repaint();
        }
    }//GEN-LAST:event_jComboBoxPlancheItemStateChanged

    private void jComboBoxSoliveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxSoliveItemStateChanged
        if(!flagJComboBox && evt.getStateChange()==ItemEvent.SELECTED){
            String item = jComboBoxSolive.getSelectedItem().toString();
            switch (item) {
                case "2 x 4":
                    controleur.changerValeurPatio(ChampSaisie.DIMENSION_SOLIVE, (float)3.5);
                    break;
                case "2 x 6":
                    controleur.changerValeurPatio(ChampSaisie.DIMENSION_SOLIVE, (float)5.5);
                    break;
                case "2 x 8":
                    controleur.changerValeurPatio(ChampSaisie.DIMENSION_SOLIVE, (float)7.25);
                    break;
                case "2 x 10":
                    controleur.changerValeurPatio(ChampSaisie.DIMENSION_SOLIVE, (float)9.25);
                    break;
                case "2 x 12":
                    controleur.changerValeurPatio(ChampSaisie.DIMENSION_SOLIVE, (float)11.25);
                    break;
                default:
                    break;
            }
            controleur.majPiecesDeBois();
            chargerInfoPatio();
            afficherTextValidation();
            sauvegarderEtatPatio();
            patioPanel.repaint();
        }
    }//GEN-LAST:event_jComboBoxSoliveItemStateChanged

    private void jComboBoxPoutreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxPoutreItemStateChanged
        if(!flagJComboBox && evt.getStateChange()==ItemEvent.SELECTED){
            String item = jComboBoxPoutre.getSelectedItem().toString();
            switch (item) {
                case "2 x 4":
                    controleur.changerValeurPatio(ChampSaisie.DIMENSION_POUTRE, (float)3.5);
                    break;
                case "2 x 6":
                    controleur.changerValeurPatio(ChampSaisie.DIMENSION_POUTRE, (float)5.5);
                    break;
                case "2 x 8":
                    controleur.changerValeurPatio(ChampSaisie.DIMENSION_POUTRE, (float)7.25);
                    break;
                case "2 x 10":
                    controleur.changerValeurPatio(ChampSaisie.DIMENSION_POUTRE, (float)9.25);
                    break;
                case "2 x 12":
                    controleur.changerValeurPatio(ChampSaisie.DIMENSION_POUTRE, (float)11.25);
                    break;
                default:
                    break;
            }
            controleur.majPiecesDeBois();
            chargerInfoPatio();
            afficherTextValidation();
            sauvegarderEtatPatio();
            patioPanel.repaint();
        }
    }//GEN-LAST:event_jComboBoxPoutreItemStateChanged

    private void textPoutreNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPoutreNombreFocusLost
        if(!textPoutreNombre.getText().equals(nombreInitial)){
            if(controleur.nbPoteauPoutreValide(textPoutreNombre.getText())){
                int val = Integer.valueOf(textPoutreNombre.getText());
                controleur.changerValeurPatio(ChampSaisie.NOMBRE_POUTRE, val);
                textPoutreNombre.setBackground(Color.WHITE);
                controleur.majPiecesDeBois();
                chargerInfoPatio();
                afficherTextValidation();
                sauvegarderEtatPatio();
                patioPanel.repaint();
            }else{
                textPoutreNombre.setBackground(new Color(205, 115, 33));
            }
        }


    }//GEN-LAST:event_textPoutreNombreFocusLost

    private void textPoutreNombreFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPoutreNombreFocusGained
        nombreInitial = textPoutreNombre.getText();
        textPoutreNombre.selectAll();
    }//GEN-LAST:event_textPoutreNombreFocusGained

    private void textPoteauNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPoteauNombreFocusLost
        if(!textPoteauNombre.getText().equals(nombreInitial)){
            if(controleur.nbPoteauPoutreValide(textPoteauNombre.getText())){
                int val = Integer.valueOf(textPoteauNombre.getText());
                controleur.changerValeurPatio(ChampSaisie.NOMBRE_POTEAU, val);
                textPoteauNombre.setBackground(Color.WHITE);
                controleur.majPiecesDeBois();
                chargerInfoPatio();
                afficherTextValidation();
                sauvegarderEtatPatio();
                patioPanel.repaint();
            }else{
                textPoteauNombre.setBackground(new Color(205, 115, 33));
            }
        }

    }//GEN-LAST:event_textPoteauNombreFocusLost

    private void textPoteauNombreFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPoteauNombreFocusGained
        nombreInitial = textPoteauNombre.getText();
        textPoteauNombre.selectAll();
    }//GEN-LAST:event_textPoteauNombreFocusGained

    private void patioPanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_patioPanelMouseWheelMoved
        if(evt.getWheelRotation()<0){
            controleur.zoomer(evt.getPoint());
        }else{
            controleur.dezoomer(evt.getPoint());
        }
        patioPanel.repaint();
    }//GEN-LAST:event_patioPanelMouseWheelMoved

    private void jMenuEnregistrerSousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuEnregistrerSousActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Enregistrer sous");
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try {
                controleur.enregistrerProjet(fileToSave.getPath()+".ser");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Un problème est survenu lors de la manipulation d'un fichier", "IOException", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuEnregistrerSousActionPerformed
    private void chargerLesOptionPatio(){
        chargerInfoPatio();
        panelPlancheColor.setBackground(controleur.getPlancheColor());
        panelSoliveColor.setBackground(controleur.getSoliveColor());
        panelPoutreColor.setBackground(controleur.getPoutreColor());
        panelPoteauColor.setBackground(controleur.getPoteauColor());
        jCheckBoxPlanche.setSelected(controleur.chargerVisibiliteTrans()[0][0]);
        jCheckBoxSolive.setSelected(controleur.chargerVisibiliteTrans()[1][0]);
        jCheckBoxPoutre.setSelected(controleur.chargerVisibiliteTrans()[2][0]);
        jCheckBoxPoteau.setSelected(controleur.chargerVisibiliteTrans()[3][0]);
        jCheckPlancheTrans.setSelected(controleur.chargerVisibiliteTrans()[0][1]);
        jCheckSoliveTrans.setSelected(controleur.chargerVisibiliteTrans()[1][1]);
        jCheckPoutreTrans.setSelected(controleur.chargerVisibiliteTrans()[2][1]);
        jCheckPoteauTrans.setSelected(controleur.chargerVisibiliteTrans()[3][1]);
        if(null==controleur.getVue()){
            radioFace.setSelected(true);
        }else switch (controleur.getVue()) {
            case PLAN:
                radioPlan.setSelected(true);
                break;
            case COTE:
                radioCotee.setSelected(true);
                break;
            case FACE:
                radioFace.setSelected(true);
                break;
        }
    }
    private void jMenuOuvrirProjetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuOuvrirProjetActionPerformed
        boolean ouvrirProjet=true;
        if(!premierProjet){
            ouvrirProjet = JOptionPane.showConfirmDialog(this, "Désirez-vous vraiment quitter le projet ?")
                    == JOptionPane.YES_OPTION;
        }
        if (ouvrirProjet){
            JFileChooser chooser = new JFileChooser();
            chooser.setDialogTitle("Ouvrir un projet:");
            //FileNameExtensionFilter filter = new FileNameExtensionFilter("ser");
            //chooser.setFileFilter(filter);
            FileFilter filter = new FileNameExtensionFilter("SER File","ser");
            chooser.addChoosableFileFilter(filter);
            int returnVal = chooser.showOpenDialog(this);
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    if(chooser.getSelectedFile().getPath().endsWith(".ser")){
                        controleur.ouvrirProjet(chooser.getSelectedFile().getPath());
                        controleur.initialiserZoom();
                        this.setTitle(chooser.getSelectedFile().getName());
                        frameVisible(true);
                        chargerLesOptionPatio();
                        afficherTextValidation();
                        controleur.clearListeUndoRedo();
                        premierProjet = true;
                        sauvegarderEtatPatio();
                        patioPanel.setMainWindow(this);
                        patioPanel.repaint();
                    }else{
                        throw new ClassNotFoundException();
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Un problème est survenu lors de la manipulation d'un fichier", 
                            "IOException", JOptionPane.INFORMATION_MESSAGE);

                } catch (ClassNotFoundException ex) {
                    JOptionPane.showMessageDialog(null, "Un problème est survenu lors du chargement du fichier", 
                            "ClassNotFoundException", JOptionPane.INFORMATION_MESSAGE);

                }

            }
        }
    }//GEN-LAST:event_jMenuOuvrirProjetActionPerformed

    private void textSolivePAFauxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textSolivePAFauxFocusGained
        textInitial = textSolivePAFaux.getText();
        textSolivePAFaux.selectAll();
    }//GEN-LAST:event_textSolivePAFauxFocusGained

    private void textSolivePAFauxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textSolivePAFauxFocusLost
        String largeurPatio = textSolivePAFaux.getText();
        if(!textInitial.equals(largeurPatio)){
            float val = controleur.getFloatValeur(largeurPatio);
            if(val >= 0){
                controleur.changerValeurPatio(ChampSaisie.PAFAUX_SOLIVE, val);
                textSolivePAFaux.setBackground(Color.WHITE);
                controleur.majPiecesDeBois();
                chargerInfoPatio();
                afficherTextValidation();
                sauvegarderEtatPatio();
                patioPanel.repaint();
            }else{
                textSolivePAFaux.setBackground(new Color(205, 115, 33));
            }
        }
    }//GEN-LAST:event_textSolivePAFauxFocusLost

    private void textPoutreNbPlieSimpleFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPoutreNbPlieSimpleFocusGained
        nombreInitial = textPoutreNbPlieSimple.getText();
        textPoutreNbPlieSimple.selectAll();
    }//GEN-LAST:event_textPoutreNbPlieSimpleFocusGained

    private void textPoutreNbPlieSimpleFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPoutreNbPlieSimpleFocusLost
        if(!textPoutreNbPlieSimple.getText().equals(nombreInitial)){
            if(controleur.nbPlieValide(textPoutreNbPlieSimple.getText())){
                int val = Integer.valueOf(textPoutreNbPlieSimple.getText());
                controleur.changerValeurPatio(ChampSaisie.NB_PLIE_SIMPLE_1, val);
                textPoutreNbPlieSimple.setBackground(Color.WHITE);
                controleur.majPiecesDeBois();
                chargerInfoPatio();
                afficherTextValidation();
                sauvegarderEtatPatio();
                patioPanel.repaint();
            }else{
                textPoutreNbPlieSimple.setBackground(new Color(205, 115, 33));
            }
        }

    }//GEN-LAST:event_textPoutreNbPlieSimpleFocusLost

    private void textPoutreNbPlieDoubleFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPoutreNbPlieDoubleFocusGained
        nombreInitial = textPoutreNbPlieDouble.getText();
        textPoutreNbPlieDouble.selectAll();
    }//GEN-LAST:event_textPoutreNbPlieDoubleFocusGained

    private void textPoutreNbPlieDoubleFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textPoutreNbPlieDoubleFocusLost
        if(!textPoutreNbPlieDouble.getText().equals(nombreInitial)){
            if(controleur.nbPlieValide(textPoutreNbPlieDouble.getText())){
                int val = Integer.valueOf(textPoutreNbPlieDouble.getText());
                controleur.changerValeurPatio(ChampSaisie.NB_PLIE_DOUBLE,val);
                textPoutreNbPlieDouble.setBackground(Color.WHITE);
                controleur.majPiecesDeBois();
                chargerInfoPatio();
                afficherTextValidation();
                sauvegarderEtatPatio();
                patioPanel.repaint();
            }else{
                textPoutreNbPlieDouble.setBackground(new Color(205, 115, 33));
            }
        }

    }//GEN-LAST:event_textPoutreNbPlieDoubleFocusLost

    private void jMenuExporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExporterActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Exporter en 3D");
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try {
                controleur.exporterSTL(fileToSave.getPath()+".stl");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Un problème est survenu lors de la manipulation d'un fichier", 
                            "IOException", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_jMenuExporterActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        PanelChoixPrix panelPrix = new PanelChoixPrix();
        boolean champVide = true;
        ArrayList<String> listePrix = new ArrayList<String>();
        int i=0;
        //charger la liste des prix dans les champs de textes
        for (Component component : panelPrix.getComponents()) {
            if(component instanceof javax.swing.JTextField){
                javax.swing.JTextField text = (javax.swing.JTextField) component;
                text.setText(Float.toString(controleur.chargerPrixBois()[i]));
                i++;
            }
        }
        while(champVide){
            listePrix.clear();
            champVide = false;
            int choix = JOptionPane.showOptionDialog(this, 
            new Object[] {panelPrix},
            "Liste des prix",
            JOptionPane.NO_OPTION,
            JOptionPane.PLAIN_MESSAGE, null, 
            new String[] {"Enregistrer", "Annuler"}, null); 
            if(choix ==0){
                for (Component component : panelPrix.getComponents()) {
                    if(component instanceof javax.swing.JTextField){
                        javax.swing.JTextField text = (javax.swing.JTextField) component;
                        if (!text.getText().matches("[0-9]+,[0-9]+|[0-9]+\\.[0-9]+|[0-9]+")){
                            JOptionPane.showMessageDialog(null, "Un ou plusieurs champs de saisies sont vides ou invalides", 
                                    "Saisies invalides", JOptionPane.INFORMATION_MESSAGE);
                            champVide = true;
                            break;
                        }
                        listePrix.add(text.getText().replaceAll(",", "."));
                    }
                }
                if(!champVide){
                    controleur.majPrixPieceBois(listePrix.toArray());
                    jTextPrixTotal.setText(controleur.getPrixTotal());
                    sauvegarderEtatPatio();
                }
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void panelPoteauColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelPoteauColorMouseClicked
        Color couleur = JColorChooser.showDialog(this, "Choisir couleur poteaux",controleur.getPoteauColor());
        if(couleur != null&&controleur.getPoteauColor()!=couleur){
            panelPoteauColor.setBackground(couleur);
            controleur.changerCouleur(Section.POTEAU, couleur);
            sauvegarderEtatPatio();
            patioPanel.repaint();
        }
    }//GEN-LAST:event_panelPoteauColorMouseClicked

    private void panelPoutreColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelPoutreColorMouseClicked
        Color couleur = JColorChooser.showDialog(this, "Choisir couleur poutres",controleur.getPoutreColor());
        if(couleur != null&&controleur.getPoutreColor()!=couleur){
            panelPoutreColor.setBackground(couleur);
            controleur.changerCouleur(Section.POUTRE, couleur);
            sauvegarderEtatPatio();
            patioPanel.repaint();
        }
    }//GEN-LAST:event_panelPoutreColorMouseClicked

    private void panelSoliveColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelSoliveColorMouseClicked
        Color couleur = JColorChooser.showDialog(this, "Choisir couleur solives",controleur.getSoliveColor());
        if(couleur != null&&controleur.getSoliveColor()!=couleur){
            panelSoliveColor.setBackground(couleur);
            controleur.changerCouleur(Section.SOLIVE, couleur);
            sauvegarderEtatPatio();
            patioPanel.repaint();
        }
    }//GEN-LAST:event_panelSoliveColorMouseClicked

    private void panelPlancheColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelPlancheColorMouseClicked
        Color couleur = JColorChooser.showDialog(this, "Choisir couleur planches",controleur.getPlancheColor());
        if(couleur != null&&controleur.getPlancheColor()!=couleur){
            panelPlancheColor.setBackground(couleur);
            controleur.changerCouleur(Section.RECOUVREMENT, couleur);
            sauvegarderEtatPatio();
            patioPanel.repaint();
        }
    }//GEN-LAST:event_panelPlancheColorMouseClicked

    private void jCheckBoxPlancheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPlancheActionPerformed
        if(jCheckBoxPlanche.isSelected()){
            controleur.changerVisibilite(true, Section.RECOUVREMENT);
        }else{
            controleur.changerVisibilite(false, Section.RECOUVREMENT);
        }
        sauvegarderEtatPatio();
        patioPanel.repaint();
    }//GEN-LAST:event_jCheckBoxPlancheActionPerformed

    private void jCheckBoxPoteauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPoteauActionPerformed
        if(jCheckBoxPoteau.isSelected()){
            controleur.changerVisibilite(true, Section.POTEAU);
        }else{
            controleur.changerVisibilite(false, Section.POTEAU);
        }
        sauvegarderEtatPatio();
        patioPanel.repaint();
    }//GEN-LAST:event_jCheckBoxPoteauActionPerformed

    private void jCheckPoteauTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckPoteauTransActionPerformed
        if(jCheckPoteauTrans.isSelected()){
            controleur.changerTransparence(true, Section.POTEAU);
        }else{
            controleur.changerTransparence(false, Section.POTEAU);
        }
        sauvegarderEtatPatio();
        patioPanel.repaint();
    }//GEN-LAST:event_jCheckPoteauTransActionPerformed

    private void jCheckSoliveTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckSoliveTransActionPerformed
        if(jCheckSoliveTrans.isSelected()){
            controleur.changerTransparence(true, Section.SOLIVE);
        }else{
            controleur.changerTransparence(false, Section.SOLIVE);
        }
        sauvegarderEtatPatio();
        patioPanel.repaint();
    }//GEN-LAST:event_jCheckSoliveTransActionPerformed

    private void jCheckPoutreTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckPoutreTransActionPerformed
        if(jCheckPoutreTrans.isSelected()){
            controleur.changerTransparence(true, Section.POUTRE);
        }else{
            controleur.changerTransparence(false, Section.POUTRE);
        }
        sauvegarderEtatPatio();
        patioPanel.repaint();
    }//GEN-LAST:event_jCheckPoutreTransActionPerformed

    private void jCheckBoxPoutreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPoutreActionPerformed
        if(jCheckBoxPoutre.isSelected()){
            controleur.changerVisibilite(true, Section.POUTRE);
        }else{
            controleur.changerVisibilite(false, Section.POUTRE);
        }
        sauvegarderEtatPatio();
        patioPanel.repaint();
    }//GEN-LAST:event_jCheckBoxPoutreActionPerformed

    private void jCheckPlancheTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckPlancheTransActionPerformed
        if(jCheckPlancheTrans.isSelected()){
            controleur.changerTransparence(true, Section.RECOUVREMENT);
        }else{
            controleur.changerTransparence(false, Section.RECOUVREMENT);
        }
        sauvegarderEtatPatio();
        patioPanel.repaint();
    }//GEN-LAST:event_jCheckPlancheTransActionPerformed

    private void jCheckBoxSoliveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSoliveActionPerformed
        if(jCheckBoxSolive.isSelected()){
            controleur.changerVisibilite(true, Section.SOLIVE);
        }else{
            controleur.changerVisibilite(false, Section.SOLIVE);
        }
        sauvegarderEtatPatio();
        patioPanel.repaint();
    }//GEN-LAST:event_jCheckBoxSoliveActionPerformed

    private void radioFaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioFaceActionPerformed
        if(radioFace.isSelected()&&controleur.getVue()!=Vue.FACE){
            controleur.changerVue(Vue.FACE);
            sauvegarderEtatPatio();
            patioPanel.repaint();
        }
    }//GEN-LAST:event_radioFaceActionPerformed

    private void radioCoteeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioCoteeActionPerformed
        if(radioCotee.isSelected()&&controleur.getVue()!=Vue.COTE){
            controleur.changerVue(Vue.COTE);
            sauvegarderEtatPatio();
            patioPanel.repaint();
        }
    }//GEN-LAST:event_radioCoteeActionPerformed

    private void radioPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioPlanActionPerformed
        if(radioPlan.isSelected()&&controleur.getVue()!=Vue.PLAN){
            controleur.changerVue(Vue.PLAN);
            sauvegarderEtatPatio();
            patioPanel.repaint();
        }
    }//GEN-LAST:event_radioPlanActionPerformed

    private void jMenuItemMagiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMagiqueActionPerformed
        controleur.boutonMagique();
        controleur.majPiecesDeBois();
        chargerInfoPatio();
        afficherTextValidation();
        sauvegarderEtatPatio();
        patioPanel.repaint();
    }//GEN-LAST:event_jMenuItemMagiqueActionPerformed

    private void jMenuExporterPNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExporterPNGActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Exporter en image png");
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try {
                patioPanel.paint(controleur.preparerGraphics(patioPanel.getSize().width, patioPanel.getSize().height));
                controleur.exporterPNG(fileToSave.getPath()+".png");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Un problème est survenu lors de l'enregistrement de l'image", "Exception", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_jMenuExporterPNGActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        //jTextInfoValidation.setText(Integer.toString(evt.getKeyCode()));
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ESCAPE:
                controleur.initialiserZoom();
                patioPanel.repaint();
                break;
            case KeyEvent.VK_CONTROL:
                controlPressed = true;
                break;
            case KeyEvent.VK_SHIFT:
                shiftPressed = true;
                break;
            case KeyEvent.VK_S:
                if(controlPressed && shiftPressed){
                    controlPressed = false;
                    shiftPressed = false;
                    jMenuEnregistrerSousActionPerformed(null);
                }
                break;
            case KeyEvent.VK_Z:
                if(controlPressed){
                    //controlPressed = false;
                    if(jMenuUndo.isEnabled())
                        jMenuUndoActionPerformed(null);
                }   
                break;
            case KeyEvent.VK_Q:
                if(controlPressed){
                    //controlPressed = false;
                    if(jMenuRedo.isEnabled())
                        jMenuRedoActionPerformed(null);
                }   
                break;
            default:
                break;
        }
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_CONTROL ){
            controlPressed = false;
        }else if(evt.getKeyCode() == KeyEvent.VK_SHIFT ){
            shiftPressed = false;
        }
    }//GEN-LAST:event_formKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        controleur.initialiserZoom();
        patioPanel.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void leftPanelBoutonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_leftPanelBoutonKeyPressed
        formKeyPressed(evt);
    }//GEN-LAST:event_leftPanelBoutonKeyPressed

    private void jTextInfoValidationKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextInfoValidationKeyPressed
       formKeyPressed(evt);
    }//GEN-LAST:event_jTextInfoValidationKeyPressed

    private void jComboBoxPoutreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPoutreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxPoutreActionPerformed
    private void jMenuRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuRedoActionPerformed
        boolean redoActive = controleur.redo();
        if(!redoActive){
            jMenuRedo.setEnabled(false);
        }
        jMenuUndo.setEnabled(true);
        chargerLesOptionPatio();
        afficherTextValidation();
        patioPanel.repaint();
    }//GEN-LAST:event_jMenuRedoActionPerformed

    private void jMenu2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenu2KeyPressed
        formKeyPressed(evt);
    }//GEN-LAST:event_jMenu2KeyPressed

    private void jMenu1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenu1KeyPressed
        formKeyPressed(evt);
    }//GEN-LAST:event_jMenu1KeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (JOptionPane.showConfirmDialog(this, "Désirez-vous quitter l'application ?")
              == JOptionPane.YES_OPTION) System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void patioPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patioPanelMouseDragged
        if(pointClickMouse!=null){
            controleur.deplacerPatio(pointClickMouse, evt.getPoint());
            controleur.setDragActive(true);
            patioPanel.repaint();
        }
    }//GEN-LAST:event_patioPanelMouseDragged
private Point pointClickMouse=null;
private boolean mousePressed=false;
    private void patioPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patioPanelMousePressed
        pointClickMouse=new Point(evt.getPoint());
        mousePressed=true;
    }//GEN-LAST:event_patioPanelMousePressed

    private void patioPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patioPanelMouseReleased
        if(mousePressed){
            controleur.finDeDrag();
        }
        controleur.setDragActive(false);
        mousePressed=false;
    }//GEN-LAST:event_patioPanelMouseReleased
    
    private boolean shiftPressed ;
    private boolean controlPressed ;
    private String textInitial = "";
    private String nombreInitial = "";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBoxPlanche;
    private javax.swing.JCheckBox jCheckBoxPoteau;
    private javax.swing.JCheckBox jCheckBoxPoutre;
    private javax.swing.JCheckBox jCheckBoxSolive;
    private javax.swing.JCheckBox jCheckPlancheTrans;
    private javax.swing.JCheckBox jCheckPoteauTrans;
    private javax.swing.JCheckBox jCheckPoutreTrans;
    private javax.swing.JCheckBox jCheckSoliveTrans;
    private javax.swing.JComboBox<String> jComboBoxPlanche;
    private javax.swing.JComboBox<String> jComboBoxPoutre;
    private javax.swing.JComboBox<String> jComboBoxSolive;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuCreeProjet;
    private javax.swing.JMenuItem jMenuEnregistrerSous;
    private javax.swing.JMenuItem jMenuExporter;
    private javax.swing.JMenuItem jMenuExporterPNG;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemListePiece;
    private javax.swing.JMenuItem jMenuItemMagique;
    private javax.swing.JMenuItem jMenuOuvrirProjet;
    private javax.swing.JMenuItem jMenuQuitter;
    private javax.swing.JMenuItem jMenuRedo;
    private javax.swing.JMenuItem jMenuUndo;
    private javax.swing.JPanel jPanelPrincipal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JTextPane jTextInfoValidation;
    private javax.swing.JTextPane jTextPrixTotal;
    private javax.swing.JPanel leftPanelBouton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel panelPlancheColor;
    private javax.swing.JPanel panelPoteauColor;
    private javax.swing.JPanel panelPoutreColor;
    private javax.swing.JPanel panelSoliveColor;
    private lePationator.gui.PatioPanel patioPanel;
    private javax.swing.ButtonGroup radioBoutonGroupe;
    private javax.swing.JRadioButton radioCotee;
    private javax.swing.JRadioButton radioFace;
    private javax.swing.JRadioButton radioPlan;
    private javax.swing.JTextField textEspacePoutre;
    private javax.swing.JTextPane textPanelInfoPiece;
    private javax.swing.JTextField textPatioHauteur;
    private javax.swing.JTextField textPatioLargeur;
    private javax.swing.JTextField textPatioLongueur;
    private javax.swing.JTextField textPlancheEspace;
    private javax.swing.JTextField textPoteauNombre;
    private javax.swing.JTextField textPoutreNbPlieDouble;
    private javax.swing.JTextField textPoutreNbPlieSimple;
    private javax.swing.JTextField textPoutreNombre;
    private javax.swing.JTextField textSoliveEspace;
    private javax.swing.JTextField textSolivePAFaux;
    private javax.swing.JPanel topPanelBouton;
    // End of variables declaration//GEN-END:variables

}
